AUTO_INCREMENT : 컬럼의 값이 중복되지 않게 1씩 자동으로 증가하게 해줘 고유번호를 생성해 줍니다.

NOT NULL : 해당 필드는 NULL 값을 저장할 수 없게 됩니다.
UNIQUE : 해당 필드는 서로 다른 값을 가져야만 합니다.

PRIMARY KEY : 해당 필드가 NOT NULL과 UNIQUE 제약 조건의 특징을 모두 가지게 됩니다.

FOREIGN KEY : 하나의 테이블을 다른 테이블에 의존하게 만들며 데이터의 무결성을 보장해 줍니다.

CASCADE : FOREIGN KEY 로 연관된 데이터를 삭제,변경할 수 있습니다.


1-22 한번 더듣자
테이블에서 컬럼(세로*목차) = 각 필드값 (id , username , contents ... )
                     (가로) = new 객체 





2-1 = 컨트롤러,서비스,레퍼지토리 쓰리레이어(3객체) crud = 크레이트,리드,업데이트,딜리트
저장 = 브라우저 -> 컨트롤러 -> 서비스 -> 레퍼지토리 -> 데이터베이스
불러오기 = 저장의 역순

2-3 = ioC(제어의역전:설계원칙) , Di(의존성주입:디자인) ->  **
김치볶음밥 맛있게 만드는법
ioC -> 좋은재료,신김치,조리시간,열조절 ...
Di -> 레시피
좋은코드 = 간단, 중복x, 명확한표현(명칭), 의존성최소한만*
* 의존성최소한 = A,B,C ... 이렇게 입력될때 A는... B는... 이 아니라, 알파벳은... 이렇게 작동되게할것


2-5
@Component 빈 등록
@Autowired **
@RequiredArgsConstructor **
오토와일드 -> ioc에 있는 빈객체를 스프링이 주입해주고 있음, 
+ 클레스에 @Component 써야함
스프링 프레이머크가 주입이 되는 객체,클래스(레퍼지토리) 들을 빈객체로 가지고 있다가 의존성주입이 필요할때 주입을 해준다
주입방법이 필드주입,생성자주입,메소드주입 있는데 생성자주입 추천
왜냐하면 객체의 불변성을 지켜줄수있기때문에, 하지만 생성자가 하나만 있다면 오토와일드는 생략이 가능하다
서비스는 Bean레퍼지토리를 사용하고
컨트롤러는 Bean서비스를 사용하고
내부프로그램에서는 Bean컨트롤러를 사용하고있음
내부프로그램 -> Bean컨트롤러 -> Bean서비스 -> Bean레퍼지토리


2-6 ORM (Object-Relational Mapping)오브젝트 렐레이션 맵핑
하이버네이트 : jpa가 표준명칭이지만 실제로는 하이버네이트를 씀 그래서 -> 사실상 표준

2-7 entity클래스













